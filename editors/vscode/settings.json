{
  //----------------------------------------------------------------------------
  //--- Editor Settings
  //----------------------------------------------------------------------------

  "files.autoSave": "off",               // When to auto save files.
  "files.autoSaveDelay": 1000,                  // Milliseconds to wait before auto saving.
  "editor.accessibilitySupport": "off",         // Don't use accessibility features VS Code.
  "editor.renderWhitespace": "trailing",        // Show trailing whitespace.
  "editor.lineHeight": 2,                       // Line height in editor.
  "editor.rulers": [80,120,150],                // Vertical character guide lines.
  "editor.tabSize": 2,                          // Number of spaces per tab.
  "editor.wordWrap": "off",                     // Wrap words automatically if buffer shrinks.
  "editor.minimap": {                           // Don't show minimap at right corner.
    "enabled": false
  },
  "editor.lineNumbers": "relative",             // Show relative line numbers.
  "folding": "false",                           // Disable code folding.
  "files.insertFinalNewline": true,             // Insert an empty line at the bottom of files.
  "files.trimTrailingWhitespace": true,         // Trim trailing whitespace after auto save.
  "editor.occurrencesHighlight": "off",         // Don't highlight other occurrences of word under cursor.
  "workbench.editor.showTabs": "none",          // Don't use tabs.
  "workbench.editor.limit.enabled": true,       // Limit number of open buffers in background.
  "workbench.editor.limit.value": 10,            // Number of open buffers in one editor group (buffer). If i set this to 1, it doesn't allow more buffers than 1!!

  // Project Tree:
  "workbench.tree.indent": 12,                    // Indentation in px.
  "workbench.tree.renderIndentGuides": "always",  // Always show indent guides.

  // Cursor Settings:
  "editor.cursorBlinking": "solid",             // No blinking cursor.
  "editor.cursorWidth": 2,                      // Width in px of the cursor in editor.
  "terminal.integrated.cursorWidth": 2,         // Width in px of the cursor in terminal.
  "editor.cursorSurroundingLines": 3,           // Number of cursor surrounding lines (scroll off).
  "editor.cursorStyle": "line",                 // Cursor style.
  "terminal.integrated.cursorBlinking": false,  // No blinking cursor in terminal.


  // Font Settings:
  "editor.fontSize": 12,                        // Editor font size.
  "terminal.integrated.fontSize": 12,           // Terminal font size.
  "debug.console.fontSize": 12,                 // Debug console font size.
  "chat.editor.fontSize": 12,                   // Chat font size.
  "markdown.preview.fontSize": 12,              // Markdown preview font size.
  "editor.fontFamily": "MesloLGMDZ Nerd Font",  // Font family.
  "fontWeight": "400",                          // Global font weight.
  "fontLigatures": false,                       // Disable ligatures.

  //----------------------------------------------------------------------------
  // Integrated Terminal

  "terminal.integrated.tabs.hideCondition": "never", // Always show terminal tabs.
  "terminal.integrated.tabs.location": "left", // Show terminal tabs on left side (top/bottom is not possible).


  //----------------------------------------------------------------------------
  // Color Theme
  //----------------------------------------------------------------------------

  "workbench.colorTheme": "Default Dark+",                // Set color theme.
  "workbench.preferredDarkColorTheme": "Default Dark+",   // Set color theme for dark mode.
  "editor.bracketPairColorization.enabled": false,        // Disable rainbow colored brackets.
  "editor.colorDecorators": false,                        // Disable color squares in front of color code.
  "editor.tokenColorCustomizations": {                    // Language defaults.
    "comments": "#FF0000",
    "strings": "#CE9178",
    "keywords": "#569CD6",
    "numbers": "#A5C25C",
    "functions": "#E8BF6A",
    "variables": "#C064C7",
    "types": "#45C8B0",
  "textMateRules": [
    { //--- Turquoise: HTML attributes, namespaces, class names etc.:
      "scope": [
        // TypeScript:
        "entity.other.attribute-name.tsx", // HTML attribute name.
        "meta.type.annotation.tsx",
        // HTML:
        "entity.other.attribute-name.html" // Attribute names.
      ],
      "settings": {
        "foreground": "#45C8B0"
      }
    },
    { // White: Operators, braces etc.:
      "scope": [
        // TypeScript:
        "punctuation.definition.parameters.begin.tsx", // ( bracket.
        "punctuation.definition.parameters.end.tsx",  // ) bracket.
        "punctuation.section.embedded.begin.tsx",
        "punctuation.section.embedded.end.tsx",
        "keyword.operator.assignment.tsx",
        "meta.brace.round.tsx",
        "punctuation.separator.key-value.tsx",
        "punctuation.definition.tag.begin.tsx",
        "punctuation.definition.tag.end.tsx",
        "punctuation.separator.comma.tsx",
        "punctuation.terminator.statement.tsx",
        "punctuation.definition.block.tsx",
        "keyword.operator.logical.tsx",
        "keyword.operator.comparison.tsx",  // ===, !==, etc.
        "punctuation.accessor.tsx",         // . operator.
        "meta.brace.square.tsx",           // Square brackets [].
        "keyword.operator.ternary.tsx",  // Ternary operator characters.
        "storage.type.function.arrow.tsx", // => in functions.
        "keyword.operator.optional.tsx", // ? in type declarations.
        "keyword.operator.type.annotation.tsx", // : in type declarations.
        // JSON:
        "punctuation.definition.dictionary.begin.json.comments",
        "punctuation.definition.dictionary.end.json.comments",
        "punctuation.separator.dictionary.pair.json.comments",
        "punctuation.separator.dictionary.key-value.json.comments", // : sign
        "punctuation.definition.array.begin.json.comments",
        "punctuation.definition.array.end.json.comments",
      ],
      "settings": {
        "foreground": "#ABABAB"
      }
    },
    { //-- Purple: Variables, constants etc.:
      "scope": [
        "variable.other.readwrite.tsx",
        "variable.other.constant.object.tsx",
        "support.type.property-name.json.comments",
        "entity.name.type.tsx",
      ],
      "settings": {
        "foreground": "#C064C7"
      }
    },
    { // Strings etc.:
      "scope": [
        // TypeScript:
        "punctuation.definition.template-expression.begin.tsx",
        "punctuation.definition.template-expression.end.tsx",
      ],
      "settings": {
        "foreground": "#CE9178"
      }
    },
    { // HTML
      "scope": [
        "punctuation.definition.tag.begin.html",  // Tag begin bracket.
        "punctuation.definition.tag.end.html"     // Tag end bracket.
      ],
      "settings": {
        "foreground": "#606366"
      }
    }, { // Blade
      "scope": [
        "punctuation.definition.comment.begin.blade",
        "punctuation.definition.comment.end.blade",
        "comment.block.blade"
      ],
      "settings": {
        "foreground": "#FF0000"
      }
    }, { //--- Blue: Keywords, classes, functions etc.:
      "scope": [
        // TypeScript:
        "support.type.primitive.tsx",
        "support.type.builtin.tsx" // Types/keywords.
      ],
      "settings": {
        "foreground": "#569CD6"
      }
    }
  ]
  },
  "editorBracketHighlight.foreground1": "#FF0000",
  "editorBracketHighlight.foreground2": "#FF0000",
  "editorBracketHighlight.foreground3": "#FF0000",
  "editorBracketHighlight.foreground4": "#FF0000",
  "editorBracketHighlight.foreground5": "#FF0000",
  "editorBracketHighlight.foreground6": "#FF0000",
  "editorBracketPairGuide.activeBackground1": "#FF0000",
  "editorBracketPairGuide.activeBackground2": "#FF0000",
  "editorBracketPairGuide.activeBackground3": "#FF0000",
  "editorBracketPairGuide.activeBackground4": "#FF0000",
  "editorBracketPairGuide.activeBackground5": "#FF0000",
  "editorBracketPairGuide.activeBackground6": "#FF0000",
  "editorBracketPairGuide.background1": "#FF0000",
  "editorBracketPairGuide.background2": "#FF0000",
  "editorBracketPairGuide.background3": "#FF0000",
  "editorBracketPairGuide.background4": "#FF0000",
  "editorBracketPairGuide.background5": "#FF0000",
  "editorBracketPairGuide.background6": "#FF0000",
  "workbench.colorCustomizations": {

    //--------------------------------------------------------------------------
    // Title Bar (very top of window)

    "titleBar.activeBackground": "#191B1C",
    "titleBar.activeForeground": "#606366",
    "titleBar.inactiveBackground": "#191B1C",
    "titleBar.inactiveForeground": "#606366",
    "titleBar.border": "#191B1C",


    //--------------------------------------------------------------------------
    // Search bar and it's menu in title bar

    "commandCenter.foreground": "#606366",        // Foreground of search bar.
    "commandCenter.activeForeground": "#FF0000",  // Foreground of search bar on hover.
    "commandCenter.background": "#252525",        // Background of search bar.
    "commandCenter.activeBackground": "#FF0000",
    "commandCenter.activeBorder": "#FF0000",
    "commandCenter.border": "#252525",
    "commandCenter.inactiveForeground": "#287BDE",
    "commandCenter.inactiveBorder": "#252525",
    "commandCenter.debuggingBackground": "#287BDE70",

    //--------------------------------------------------------------------------
    // Bread Crumbs (under title or tab bar)

    "breadcrumb.foreground": "#606366",
    "breadcrumb.background": "#252525",
    "breadcrumb.focusForeground": "#569CD6",
    "breadcrumb.activeSelectionForeground": "#569CD6",
    "breadcrumbPicker.background": "#252525",


    //--------------------------------------------------------------------------
    // Editor

    "editor.background": "#191B1C",                      // Background of editor.
    "editor.foreground": "#ABABAB",                      // Foreground of editor.
    "editor.selectionBackground": "#606366",             // Background of selected text.
    "editorIndentGuide.background1": "#252525",
    "editorIndentGuide.background2": "#252525",
    "editorIndentGuide.background3": "#252525",
    "editorIndentGuide.background4": "#252525",
    "editorIndentGuide.background5": "#252525",
    "editorIndentGuide.background6": "#252525",
    "editorIndentGuide.activeBackground1": "#606366",
    "editorIndentGuide.activeBackground2": "#606366",
    "editorIndentGuide.activeBackground3": "#606366",
    "editorIndentGuide.activeBackground4": "#606366",
    "editorIndentGuide.activeBackground5": "#606366",
    "editorIndentGuide.activeBackground6": "#606366",

    "editor.lineHighlightBackground": "#252525",         // Background of cursor line.
    "editor.lineHighlightBorder": "#252525",             // Border of cursor line.
    "editorCursor.background": "#191B1C",
    "editorCursor.foreground": "#569CD6",
    "editorMultiCursor.primary.foreground": "#569CD6",
    "editorMultiCursor.primary.background": "#191B1C",
    "editorMultiCursor.secondary.foreground": "#C064C7",
    "editorMultiCursor.secondarybackground": "#287BDE",
    "editorRuler.foreground": "#252525",                  // Vertical character guide lines.

    //--- Gutter:
    "editorLineNumber.foreground": "#606366",            // Line numbers.
    "editorLineNumber.activeForeground": "#ABABAB",      // Active line number.
    "editorLineNumber.dimmedForeground": "#569CD6",
    "editorGutter.background": "#191B1C",
    "editorGutter.modifiedBackground": "#FF0000",
    "editorGutter.addedBackground": "#4FA544",
    "editorGutter.deletedBackground": "#DCDCAA",
    "editorGutter.commentRangeForeground": "#569CD6",  // Line in gutter if using Live Share.
    "editorGutter.commentGlyphForeground": "#191B1C",  // + symbol in comment range if using Live Share.
    "editorGutter.commentUnresolvedGlyphForeground": "#DCDCAA",
    "editorGutter.foldingControlForeground": "#45C8B0",



    "contrastActiveBorder": "#191B1C",  // Border of active elements.
    "contrastBorder": "#191B1C",        // Border of editor partial areas.
    "focusBorder": "#191B1C",           // Border of focused elements.

    "disabledForeground": "#606366",
    "descriptionForeground": "#ABABAB",

    "editorError.foreground": "#FF0000",       // Underlines of errors.
    "editorWarning.foreground": "#E8BF6A",            // Underlines of warnings.
    "editorInfo.foreground": "#569CD6",               // Underlines of infos.
    "editorHint.foreground": "#4FA544",       // Underline of hints.



    // Window:
    "icon.foreground": "#606366",       // Icons like tree arrows, settings buttons, etc.
    "button.background": "#191B1C",
    "button.foreground": "#569CD6",
    "button.border": "#569CD6",
    "button.separator": "#191B1C",
    "button.hoverBackground": "#191B1C",
    "button.secondaryForeground": "#569CD6",
    "button.secondaryBackground": "#191B1C",
    "button.secondaryHoverBackground": "#191B1C",  // Hover background of secondary buttons.
    "toolbar.hoverBackground": "#191B1C",          // Hover background of tool icons.
    "toolbar.hoverOutline": "#191B1C",             // Hover outline of tool icons.
    "toolbar.activeBackground": "#191B1C",         // Background if tool icon is clicked.
    "badge.foreground": "#191B1C",
    "badge.background": "#606366",
    "progressBar.background": "#569CD6",

    // Scrollbars:
    "scrollbar.shadow": "#606366",                    // Shadow of horizontal sticky bars on top.
    "editorStickyScroll.background": "#252525",       // Background of sticky scrollbars on top.
    "editorStickyScroll.border": "#252525",           // Border of sticky scrollbars on top.
    "editorStickyScroll.shadow": "#252525",           // Shadow of sticky scrollbars on top.
    "editorStickyScrollHover.background": "#191B1C",  // Hover background of sticky scrollbars on top.
    "scrollbarSlider.activeBackground": "#191B1C",    // Slider, if clicked on vertical scrollbars.
    "scrollbarSlider.background": "#191B1C",          // Slider on vertical scrollbars.
    "scrollbarSlider.hoverBackground": "#191B1C",     // Slider, if hovered on vertical scrollbars.
    "editorOverviewRuler.border": "#191B1C",          // Border of vertical scrollbars.
    "editorOverviewRuler.background": "#191B1C",      // Background of vertical scrollbars.

    // Project Tree:
    "sideBar.background": "#191B1C",
    "sideBar.foreground": "#ABABAB",
    "sideBar.border": "#252525",
    "sideBar.dropBackground": "#E8BF6A",
    "sideBarTitle.foreground": "#191B1C",
    "sideBarSectionHeader.background": "#252525",
    "sideBarSectionHeader.foreground": "#569CD6",
    "sideBarSectionHeader.border": "#191B1C",
    "sideBarActivityBarTop.border": "#C064C7",
    "tree.indentGuidesStroke": "#252525",
    "tree.inactiveIndentGuidesStroke": "#252525",

    // Tables in VS Code app (like Keyboard Shortcuts table):
    "tree.tableColumnsBorder": "#606366",
    "tree.tableOddRowsBackground": "#252525",

    // Tabs:
    "tab.activeBackground": "#191B1C",
    "tab.unfocusedActiveBackground": "#191B1C",
    "tab.activeForeground": "#569CD6",
    "tab.border": "#191B1C",
    "tab.activeBorder": "#191B1C",
    "tab.dragAndDropBorder": "#191B1C",
    "tab.unfocusedActiveBorder": "#191B1C",
    "tab.activeBorderTop": "#191B1C",
    "tab.unfocusedActiveBorderTop": "#191B1C",
    "tab.lastPinnedBorder": "#252525",
    "tab.inactiveBackground": "#191B1C",
    "tab.unfocusedInactiveBackground": "#191B1C",
    "tab.inactiveForeground": "#606366",
    "tab.unfocusedActiveForeground": "#569CD6",
    "tab.unfocusedInactiveForeground": "#606366",
    "tab.hoverBackground": "#191B1C",
    "tab.unfocusedHoverBackground": "#191B1C",
    "tab.hoverForeground": "#569CD6",
    "tab.unfocusedHoverForeground": "#569CD6",
    "tab.hoverBorder": "#191B1C",
    "tab.unfocusedHoverBorder": "#191B1C",
    "tab.activeModifiedBorder": "#191B1C",
    "tab.inactiveModifiedBorder": "#191B1C",
    "tab.unfocusedActiveModifiedBorder": "#191B1C",
    "tab.unfocusedInactiveModifiedBorder": "#191B1C",

    // Tab bar:
    "editorGroup.border": "#252525",
    "editorGroup.dropBackground": "#252525",
    "editorGroup.emptyBackground": "#191B1C",
    "editorGroup.focusedEmptyBorder": "#DCDCAA",
    "editorGroup.dropIntoPromptForeground": "#ABABAB",
    "editorGroup.dropIntoPromptBackground": "#252525",
    "editorGroup.dropIntoPromptBorder": "#252525",
    "editorGroupHeader.noTabsBackground": "#191B1C",
    "editorGroupHeader.tabsBackground": "#191B1C",
    "editorGroupHeader.tabsBorder": "#191B1C",
    "editorGroupHeader.border": "#191B1C",

    // ????
    "list.activeSelectionBackground": "#252525",
    "list.activeSelectionForeground": "#ABABAB",
    "list.activeSelectionIconForeground": "#287BDE",
    "list.dropBackground": "#252525",
    "list.focusBackground": "#191B1C",
    "list.focusForeground": "#569CD6",
    "list.focusHighlightForeground": "#A5C25C",
    "list.focusOutline": "#191B1C",
    "list.focusAndSelectionOutline": "#252525",
    "list.highlightForeground": "#287BDE",
    "list.hoverBackground": "#191B1C",
    "list.hoverForeground": "#ABABAB",
    "list.inactiveSelectionBackground": "#252525",
    "list.inactiveSelectionForeground": "#569CD6",
    "list.inactiveSelectionIconForeground": "#569CD6",
    "list.inactiveFocusBackground": "#252525",
    "list.inactiveFocusOutline": "#252525",
    "list.invalidItemForeground": "#287BDE",
    "list.errorForeground": "#4FA544",
    "list.warningForeground": "#ED3276",
    "list.filterMatchBackground": "#287BDE",
    "list.filterMatchBorder": "#C064C7",
    "list.deemphasizedForeground": "#ED3276",
    "list.dropBetweenBackground": "#45C8B0",

    // Activity Bar (very left, vertical bar with icons):
    "activityBar.background": "#191B1C",
    "activityBar.dropBorder": "#569CD6",
    "activityBar.foreground": "#569CD6",
    "activityBar.inactiveForeground": "#606366",
    "activityBar.border": "#191B1C",
    "activityBar.activeBorder": "#191B1C",
    "activityBar.activeBackground": "#191B1C",
    "activityBar.activeFocusBorder": "#191B1C",
    "activityBarBadge.background": "#606366",
    "activityBarBadge.foreground": "#191B1C",
    "activityBarTop.foreground": "#ED3276",
    "activityBarTop.activeBorder": "#E8BF6A",
    "activityBarTop.inactiveForeground": "#45C8B0",
    "activityBarTop.dropBorder": "#C064C7",
    "activityBarTop.background": "#ABABAB",
    "activityBarTop.activeBackground": "#45C8B0",


    //--------------------------------------------------------------------------
    // Status Bar (very bottom bar of window)

    "statusBar.background": "#191B1C",
    "statusBar.foreground": "#606366",
    "statusBar.border": "#191B1C",
    "statusBar.debuggingBackground": "#191B1C",
    "statusBar.debuggingForeground": "#569CD6",
    "statusBar.debuggingBorder": "#191B1C",
    "statusBar.noFolderForeground": "#ABABAB",
    "statusBar.noFolderBackground": "#191B1C",
    "statusBar.noFolderBorder": "#191B1C",
    "statusBar.focusBorder": "#569CD6",
    "statusBarItem.activeBackground": "#191B1C",
    "statusBarItem.hoverForeground": "#569CD6",
    "statusBarItem.hoverBackground": "#191B1C",
    "statusBarItem.prominentForeground": "#569CD6",
    "statusBarItem.prominentBackground": "#191B1C",
    "statusBarItem.prominentHoverForeground": "#569CD6",
    "statusBarItem.prominentHoverBackground": "#191B1C",
    "statusBarItem.remoteBackground": "#191B1C",
    "statusBarItem.remoteForeground": "#606366",
    "statusBarItem.remoteHoverBackground": "#191B1C",
    "statusBarItem.remoteHoverForeground": "#569CD6",
    //--- Errors:
    "statusBarItem.errorBackground": "#191B1C",         // Background of error icon.
    "statusBarItem.errorForeground": "#FF0000",         // Error icon.
    "statusBarItem.errorHoverBackground": "#191B1C",    // Hover background of error icon.
    "statusBarItem.errorHoverForeground": "#FF0000",    // Hover error icon.
    //--- Warnings:
    "statusBarItem.warningBackground": "#191B1C",       // Backround of warning icon.
    "statusBarItem.warningForeground": "#E8BF6A",       // Warning icon.
    "statusBarItem.warningHoverBackground": "#191B1C",  // Hover background of warning icon.
    "statusBarItem.warningHoverForeground": "#E8BF6A",  // Hover warning icon.

    "statusBarItem.compactHoverBackground": "#191B1C",
    "statusBarItem.focusBorder": "#569CD6",
    "statusBarItem.offlineBackground": "#ED3276",
    "statusBarItem.offlineForeground": "#E8BF6A",
    "statusBarItem.offlineHoverForeground": "#4FA544",
    "statusBarItem.offlineHoverBackground": "#569CD6",

    // Settings Window:
    "settings.headerForeground": "#ABABAB",
    "settings.modifiedItemIndicator": "#191B1C",
    "settings.dropdownBackground": "#252525",
    "settings.dropdownForeground": "#569CD6",
    "settings.dropdownBorder": "#252525",
    "settings.dropdownListBorder": "#252525",
    "settings.checkboxBackground": "#252525",
    "settings.checkboxForeground": "#569CD6",
    "settings.checkboxBorder": "#252525",
    "settings.rowHoverBackground": "#191B1C",
    "settings.textInputBackground": "#252525",
    "settings.textInputForeground": "#569CD6",
    "settings.textInputBorder": "#252525",
    "settings.numberInputBackground": "#252525",
    "settings.numberInputForeground": "#569CD6",
    "settings.numberInputBorder": "#252525",
    "settings.focusedRowBackground": "#191B1C",
    "settings.focusedRowBorder": "#191B1C",
    "settings.headerBorder": "#191B1C",
    "settings.sashBorder": "#191B1C",
    "settings.settingsHeaderHoverForeground": "#569CD6",

    // VS Code Welcome Page:
    "welcomePage.background": "#191B1C",
    "welcomePage.progress.background": "#252525",
    "welcomePage.progress.foreground": "#569CD6",
    "welcomePage.tileBackground": "#252525",
    "welcomePage.tileHoverBackground": "#252525",
    "welcomePage.tileBorder": "#252525",
    "walkThrough.embeddedEditorBackground": "#4FA544",
    "walkthrough.stepTitle.foreground": "#CE9178",


    //--------------------------------------------------------------------------
    // Git Colors

    "gitDecoration.addedResourceForeground": "#FF0000",
    "gitDecoration.renamedResourceForeground": "#FF0000",
    "gitDecoration.stageModifiedResourceForeground": "#FF0000",
    "gitDecoration.stageDeletedResourceForeground": "#FF0000",
    "gitDecoration.submoduleResourceForeground": "#ABABAB",
    "gitDecoration.modifiedResourceForeground": "#FF0000",
    "gitDecoration.deletedResourceForeground": "#FF0000",
    "gitDecoration.untrackedResourceForeground": "#FF0000",
    "gitDecoration.ignoredResourceForeground": "#606366",
    "gitDecoration.conflictingResourceForeground": "#E8BF6A",

    // Error Lens Extension
    "errorLens.errorBackground": "#191B1C00",       // Background of line with error.
    "errorLens.errorMessageBackground": "#287BDE",
    "errorLens.errorRangeBackground": "#ED3276",
    "errorLens.errorBackgroundLight": "#45C8B0",
    "errorLens.errorForeground": "#FF0000",         // Text of error message.
    "errorLens.errorForegroundLight": "#A5C25C",
    "errorLens.warningBackground": "#191B1C00",    // Background of line with warning.
    "errorLens.warningMessageBackground": "#287BDE",
    "errorLens.warningRangeBackground": "#ED3276",
    "errorLens.warningBackgroundLight": "#A5C25C",
    "errorLens.warningForeground": "#E8BF6A",      // Text of warning message.
    "errorLens.warningForegroundLight": "#45C8B0",
    "errorLens.infoBackground": "#191B1C00",        // Background of line with info.
    "errorLens.infoMessageBackground": "#ABABAB",
    "errorLens.infoRangeBackground": "#45C8B0",
    "errorLens.infoBackgroundLight": "#287BDE",
    "errorLens.infoForeground": "#569CD6",        // Text of info message.
    "errorLens.infoForegroundLight": "#ABABAB",
    "errorLens.hintBackground": "#191B1C00",    // Background of line with hint.
    "errorLens.hintMessageBackground": "#ABABAB",
    "errorLens.hintRangeBackground": "#ED3276",
    "errorLens.hintBackgroundLight": "#45C8B0",
    "errorLens.hintForeground": "#4FA544",      // Text of hint message.
    "errorLens.hintForegroundLight": "#A5C25C",
    "errorLens.statusBarIconErrorForeground": "#FF0000",    // Color of error icon in status bar.
    "errorLens.statusBarIconWarningForeground": "#E8BF6A",   // Color of warning icon in status bar.
    "errorLens.statusBarErrorForeground": "#FF0000",
    "errorLens.statusBarWarningForeground": "#E8BF6A",
    "errorLens.statusBarInfoForeground": "#A5C25C",
    "errorLens.statusBarHintForeground": "#ABABAB",
    "errorLens.messageBackgroundMode": "#ED3276"

  },



  //----------------------------------------------------------------------------
  //--- Extensions
  //----------------------------------------------------------------------------

  "extensions.autoCheckUpdates": true,    // Automatically check for updates.
  "extensions.autoUpdate": true,          // Automatically update extensions.


  //----------------------------------------------------------------------------
  // .ipynb Support Extension
  //

  "ipynb.pasteImagesAsAttachments.enabled": true,  // Enable pasting images into Markdown cells.


  //----------------------------------------------------------------------------
  // Auto Barrel Extension
  // https://marketplace.visualstudio.com/items?itemName=imgildev.vscode-auto-barrel

  "autoBarrel.files.detectExportsInFiles": false,
  "autoBarrel.files.disableRecursiveBarrelling": false,
  "autoBarrel.files.exportDefaultFilename": "filename",
  "autoBarrel.files.ignoreFilePathPatternOnExport": [
    "**/*.spec.*",
    "**/*.test.*",
    "**/*.e2e.*",
    "**/index.ts",
    "**/index.js"
  ],
  "autoBarrel.files.includeExtensionOnExport": [
    "ts",
    "tsx",
    "vue"
  ],
  "autoBarrel.files.keepExtensionOnExport": false,
  "autoBarrel.formatting.endOfLine": "lf",
  "autoBarrel.formatting.excludeSemiColonAtEndOfLine": false,
  "autoBarrel.formatting.insertFinalNewline": true,
  "autoBarrel.formatting.useSingleQuotes": true,
  "autoBarrel.language.defaultLanguage": "TypeScript",


  //----------------------------------------------------------------------------
  // Auto Close Tag Extension
  // https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag

  "auto-close-tag.activationOnLanguage": [                 // Languages to enable auto close tag.
    "xml",
    "php",
    "blade",
    "ejs",
    "jinja",
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact",
    "plaintext",
    "markdown",
    "vue",
    "liquid",
    "erb",
    "lang-cfml",
    "cfml",
    "HTML (EEx)",
    "HTML (Eex)",
    "plist"
  ],
  "auto-close-tag.disableOnLanguage": [],                  // Languages to disable auto close tag.
  "auto-close-tag.enableAutoCloseSelfClosingTag": true,    // Enable auto close self closing tags.
  "auto-close-tag.enableAutoCloseTag": true,               // Enable auto close tags.
  "auto-close-tag.excludedTags": [                         // Tags to exclude from auto close.
    "area",
    "base",
    "br",
    "col",
    "command",
    "embed",
    "hr",
    "img",
    "input",
    "keygen",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr"
  ],
  "auto-close-tag.fullMode": false,                        // Don't enable both, VS Code and Sublime Text mode.
  "auto-close-tag.insertSpaceBeforeSelfClosingTag": true,  // Insert space before self closing tags.
  "auto-close-tag.SublimeText3Mode": true,                 // Auto close tag if </ is typed.


  //----------------------------------------------------------------------------
  // Auto Import Extension
  // https://marketplace.visualstudio.com/items?itemName=steoates.autoimport

  "autoimport.autoComplete": true,                   // Enable automatic import.
  "autoimport.doubleQuotes": false,                  // Use single quotes for imports.
  "autoimport.filesToScan": "**/*.{js,jsx,ts,tsx}",  // Files to scan for imports.
  "autoimport.showNotifications": false,             // Don't show notifications of automatic imports.
  "autoimport.spaceBetweenBraces": true,             // Add space between braces in imports.
  "autoimport.useSemiColon": true,                   // Use semicolon at the end of imports.


  //----------------------------------------------------------------------------
  // Auto Rename Tag Extension
  // https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag

  "auto-rename-tag.activationOnLanguage": [  // Enable for all languages.
    "*"
  ],


  //----------------------------------------------------------------------------
  // Azure Account Extension
  // https://marketplace.visualstudio.com/items?itemName=ms-vscode.azure-account

  "azureResourceGroups.autoOpenActivityPanel": true,          // Open activity panel if activity is detected.
  "azureResourceGroups.deleteConfirmation": "EnterName",      // Use name to confirm deletions.
  "azureResourceGroups.enableOutputTimestamps": true,         // Enable timestamps in output.
  "azureResourceGroups.groupBy": "resourceType",              // How resources are grouped in tree view.
  "azureResourceGroups.selectedSubscriptions": [],            // Selected subscriptions.
  "azureResourceGroups.showHiddenTypes": true,                // Show hidden types in tree view.
  "azureResourceGroups.suppressActivityNotifications": true,  // Suppress activity notifications.
  "azure.authenticationLibrary": "ADAL",                      // Use ADAL for authentication.
  "azure.cloud": "AzureCloud",                                // Use Azure Cloud.
  "azure.customCloud.resourceManagerEndpointUrl": "",         // Custom resource manager endpoint URL.
  "azure.ppe": {},                                            // PPE environment settings for testing.
  "azure.resourceFilter": [],                                 // Resource filter (tenant-id/subscription-id).
  "azure.showSignedInEmail": true,                            // Show signed in email.
  "azure.tenant": "",                                         // Tenant ID.


  //----------------------------------------------------------------------------
  // Azure Functions Extension
  // https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurefunctions

  "azureFunctions.createPythonVenv": true,            // Create virtual environment when creating a new Python project.
  "azureFunctions.defaultFunctionAppToDeploy": "",    // Default function app for deployment.
  "azureFunctions.deploySubpath": "",                 // Default workspace subpath for deployment.
  "azureFunctions.enableJavaRemoteDebugging": false,  // Disable Java remote debugging.
  "azureFunctions.enableOpenFromPortal": false,       // Disable downloading from Azure portal.
  "azureFunctions.enableOutputTimestamps": true,      // Enable timestamps in output.
  "azureFunctions.enableRemoteDebugging": false,      // Disable remote debugging.
  "azureFunctions.endOfLifeWarning": true,            // Show end of life warning for functions after 6 months.
  "azureFunctions.funcCliPath": "",                   // Path of the Azure 'func' executable.
  "azureFunctions.functionSubpath": "src/functions",  // Default subpath for new functions.
  "azureFunctions.hostStartTimeout": 60,              // Timeout (seconds) for starting functions host.
  "azureFunctions.javaBuildTool": "maven",            // Build for Java functions projects.
  "azureFunctions.pickProcessTimeout": 60,            // Timeout (seconds) for functions host process.
  "azureFunctions.postDeployTask": "",                // Name of task to run after zip deployments.
  "azureFunctions.preDeployTask": "",                 // Name of task to run before zip deployments.
  "azureFunctions.projectLanguage": "JavaScript",     // Default language for new projects.
  // add rest of settings here


  //----------------------------------------------------------------------------
  // Azure Repos Extension
  // https://marketplace.visualstudio.com/items?itemName=ms-vscode.azure-repos


  //----------------------------------------------------------------------------
  // Azure Resources Extension
  // https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azureresourcegroups


  //----------------------------------------------------------------------------
  // Color Highlight Extension
  // https://marketplace.visualstudio.com/items?itemName=naumovs.color-highlight

  "color-highlight.enable": true,                    // Enable Color Highlighting extension.
  "color-highlight.hslWithNoFunctionLanguages": [    // Languages that should -- what?!?
    "*"
  ],
  "color-highlight.languages": [                     // Languages that should be highlighted.
    "*"
  ],
  "color-highlight.markerType": "background",        // Type of marker.
  "color-highlight.markRuler": false,                // Don't set highlight mark in scrollbar.
  "color-highlight.matchHslWithNoFunction": false,   // Highlight HSL colors without function.
  "color-highlight.matchRgbWithNoFunction": false,   // Highlight RGB colors without function.
  "color-highlight.matchWords": false,               // Don't highlight color words (red, blue, etc.).
  "color-highlight.rgbWithNoFunctionLanguages": [    // Languages that should -- what?!?
    "*"
  ],
  "color-highlight.sass.includePaths": [],           // Include paths for SASS.
  "color-highlight.useARGB": false,                  // Use ARGB instead of RGBA.


  //----------------------------------------------------------------------------
  // Dev Containers Extension
  // https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers


  //----------------------------------------------------------------------------
  // Docker Extension
  // https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker


  //----------------------------------------------------------------------------
  // DotENV Extension
  // https://marketplace.visualstudio.com/items?itemName=mikestead.dotenv


  //----------------------------------------------------------------------------
  // EditorConfig for VS Code Extension
  // https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig


  //----------------------------------------------------------------------------
  // Error Lens Extension
  // https://marketplace.visualstudio.com/items?itemName=usernamehw.errorlens

  "errorLens.alignMessage": {          // Alignment for messages.
    "start": 0,
    "end": 0,
    "minimumMargin": 0
  },
  "errorLens.borderRadius": "0.2em",   // Border radius of message background.
  "errorLens.codeLensEnabled": false,  // Don't display a message lens above the the mistake.
  "errorLens.codeLensLength": {        // Number of possible chars in message lens.
    "min": 0,
    "max": 200
  },
  "errorLens.codeLensOnClick": "showQuickFix",         // Click behavior on lens.
  "errorLens.codeLensTemplate": "$severity $message",  // Display method of text in lens.
  "errorLens.decorations": {
    "errorRange": {},                                  // Colors for error messages.
    "warningRange": {},
    "infoRange": {},
    "hintRange": {}
  },
  "errorLens.delay": 0,                               // (milliseconds) Is handled by delayMode.
  "errorLens.delayMode": "new",                       // Decorations appear if document is changed.
  "errorLens.disableLineComments": {
    "eslint": "// eslint-disable-next-line $code",
    "Stylelint": "/* stylelint-disable-next-line $code */"
  },
  "errorLens.editorHoverPartsEnabled": {
    "messageEnabled": false,
    "sourceCodeEnabled": false,
    "buttonsEnabled": false
  },
  "errorLens.enabled": true,
  "errorLens.enabledDiagnosticLevels": [
    "error",
    "warning",
    "info",
    "hint"
  ],
  "errorLens.enabledInMergeConflict": true,          // Show linting in merge conflicts.
  "errorLens.enableOnDiffView": false,               // Don't show linting in diff views.
  "errorLens.errorGutterIconColor": "#FF0000",       // Error icon color left of the line numbers.
  "errorLens.errorGutterIconPath": "",               // To specify own error icon.
  "errorLens.exclude": [],                           // Messages that should not be highlighted (regex).
  "errorLens.excludeBySource": [],                   // Sources for linting that should be excluded.
  "errorLens.excludePatterns": [],                   // Exclude files by glob pattern (["**/*.{ts,js}"]).
  "errorLens.excludeWorkspaces": [],                 // Excluded workspaces by file path.
  "errorLens.followCursor": "allLines",              // Highlight all problems in a file.
  "errorLens.followCursorMore": 0,                   // Turn of adding line numbers to top and bottom of problems.
  "errorLens.fontFamily": "",                        // Use editor font-family for messages.
  "errorLens.fontSize": "",                          // Use editor font-size for messages.
  "errorLens.fontStyleItalic": false,                // Don't make message font italic.
  "errorLens.fontWeight": "normal",                  // Use regular editor font-weight for messages.
  "errorLens.gutterEmoji": {                         // Icons if 'gutterIconSet' is setted on 'emoji'.
    "error": "",
    "warning": "",
    "info": "",
    "hint": ""
  },
  "errorLens.gutterIconsEnabled": true,              // Enable icons on the left of the line numbers.
  "errorLens.gutterIconSet": "defaultOutline",           // Gutter icon style.
  "errorLens.gutterIconsFollowCursorOverride": true, // Show gutter icons for all problems.
  "errorLens.gutterIconSize": "100%",                // Size of gutter icons.
  "errorLens.hintGutterIconColor": "#4FA544",        // Hint icon color left of the line numbers.
  "errorLens.hintGutterIconPath": "",                // To specify own hint icon.
  "errorLens.ignoreUntitled": false,                 // Don't ignore untitled files for linting.
  "errorLens.infoGutterIconColor": "#569CD6",        // Info icon color left of the line numbers.
  "errorLens.infoGutterIconPath": "",                // To specify own info icon.
  "errorLens.light": {},                             // Colors for light mode of editor.
  "errorLens.lintFilePaths": {                       // File paths where linters can be found.
    "eslint": [
      "**/*.eslintrc.{js,cjs,yaml,yml,json}",
      "**/*package.json"
    ],
    "Stylelint": [
      "**/*.stylelintrc",
      "**/*.stylelintrc.{cjs,js,json,yaml,yml}",
      "**/*stylelint.config.{cjs,js}",
      "**/*package.json"
    ]
  },
  "errorLens.margin": "4ch",                         // Distance between the last word and message (CSS).
  "errorLens.messageBackgroundMode": "line",         // Message background of whole line.
  "errorLens.messageEnabled": true,                  // Show inline messages.
  "errorLens.messageMaxChars": 500,                  // Maximum message lenght in chars.
  "errorLens.messageTemplate": "$message",           // Template for messages.
  "errorLens.multilineMessage": {                    // EXPERIMENTAL! Multiline message settings.
    "decorationMaxNumberOfLines": 6,
    "preferFittingMessageMultiplier": 2,
    "maxColumnForCalculation": 130,
    // "preferSameLineMultiplier": 1,
    "highlightProblemLine": "line",
    "alignStart": 0,
    "alignEnd": 0,
    "margin": 4,
    "padding": 1,
    "borderRadius": "",
    "useFixedPosition": false
  },
  "errorLens.onSave": false,                          // Update not only on save.
  "errorLens.onSaveTimeout": 500,                     // (milliseconds) delay for displaying messages after save.
  "errorLens.onSaveUpdateOnActiveEditorChange": true, // Update messages if file gets saved.
  "errorLens.padding": "",                            // Padding of inline messages ("" = editor default).
  "errorLens.problemRangeDecorationEnabled": false,   // Highlight the entire problem range.
  "errorLens.removeLinebreaks": true,                 // Display messages in one line.
  "errorLens.replace": [],                            // To transform message text.
  "errorLens.replaceLinebreaksSymbol": "⏎",           // Symbol to replace line breaks.
  "errorLens.respectUpstreamEnabled": {               // Take account of global VS Code problems visibility setting.
    "enabled": true,
    "inlineMessage": true,
    "gutter": true,
    "statusBar": true
  },
  "errorLens.scrollbarHackEnabled": false,            // Don't prevent showing horizontal scrollbar because of messages.
  "errorLens.searchForProblemQuery": "https://google.com/?q=$message", // Use Google for searching messages.
  "errorLens.selectProblemType": "closestProblem",                     // Which problem to select if selecting problem by command.
  "errorLens.severityText": [                                          // Icons used in lens.
    "⛔",
    "⚠",
    "ℹ",
    "🍏"
  ],
  "errorLens.statusBarColorsEnabled": true,                            // Enable status bar colors.
  "errorLens.statusBarCommand": "goToProblem",                         // Behavior if clicked on problem in status bar.
  "errorLens.statusBarIconsAlignment": "left",                         // Alignment of icons in status bar.
  "errorLens.statusBarIconsAtZero": "removeBackground",                // Setting in status bar if there are no problems.
  "errorLens.statusBarIconsEnabled": true,                             // Show icons in status bar.
  "errorLens.statusBarIconsPriority": -9000,                           // Icon position (more left, more right) in status bar.
  "errorLens.statusBarIconsTargetProblems": "all",                     // Show all problems in status bar.
  "errorLens.statusBarIconsUseBackground": true,                       // Show icon background in status bar.
  "errorLens.statusBarMessageAlignment": "left",                       // Message alignment in status bar.
  "errorLens.statusBarMessageEnabled": false,                          // Don't show messages in status bar.
  "errorLens.statusBarMessagePriority": -10000,                        // Message position (more left, more right) in status bar.
  "errorLens.statusBarMessageTemplate": "",                            // Status bar message template.
  "errorLens.statusBarMessageType": "activeLine",                      // Message type in status bar.
  "errorLens.warningGutterIconColor": "#E8BF6A",                       // Warning icon color left of the line numbers.
  "errorLens.warningGutterIconPath": "",                               // To specify an own warning icon.


  //----------------------------------------------------------------------------
  // ES7+ React/Redux/React Native Snippets Extension


  //----------------------------------------------------------------------------
  // ESLint Extension


  //----------------------------------------------------------------------------
  // FZF Fuzzy Quick Open Extension


  //----------------------------------------------------------------------------
  // Git Extension

  "git.enabled": true,              // Enable Git extension.
  "git.allowForcePush": true,  // Allow force push to remote repository.
  "git.allowNoVerifyCommit": true,  // Allow commits without verification.
  "git.alwaysShowStagedChangesResourceGroup": false,
  "git.alwaysSignOff": false,
  "git.autofetch": "all",  // Fetch all remotes.
  "git.autofetchPeriod": 180,  // Time till next autofetch in seconds.
  "git.autorefresh": true,
  "git.autoRepositoryDetection": true,  // Automatically detect repositories.
  "git.autoStash": true,  // Automatically stash changes before pull and pop after pulling.
  "git.blame.editorDecoration.enabled": false,
  "git.blame.editorDecoration.template": "${subject}, ${authorName} (${authorDateAgo})",
  "git.blame.statusBarItem.enabled": false,
  "git.blame.statusBarItem.template": "${authorName} (${authorDateAgo})",
  "git.branchPrefix": "",  // Prefix for branch names.
  "git.branchProtection": [],
  "git.branchProtectionPrompt": "alwaysPrompt",  // Display promt if branch is protected.
  "git.branchRandomName.dictionary": [  // Dictionary for random branch names.
    "adjectives",
    "animals"
  ],
  "git.branchRandomName.enable": false, // Enable/disable random branch names.
  "git.branchSortOrder": "alphabetically",  // Sort branches alphabetically.
  "git.branchValidationRegex": "",          // Validate branch name patterns with regex.
  "git.branchWhitespaceChar": "-",           // Character to replace whitespace in branch names.
  "git.checkoutType": [                    // Localizations for checkouts.
    "local",
    "remote",
    "tags"
  ],
  "git.closeDiffOnOperation": false,  // Don't close diff after committing, stashing etc.
  "git.commandsToLog": [],             // Commands to log in output channel.
  "git.confirmEmptyCommits": false,    // Don't confirm empty commits.
  "git.confirmForcePush": false,       // Don't confirm force push.
  "git.confirmNoVerifyCommit": false,  // Don't confirm no verify commit.
  "git.confirmSync": false,           // Don't confirm sync.
  "git.countBadge": "off",           // Don't show count badge.
  "git.decorations.enabled": true,   // Enable highlightings and decorations.
  "git.defaultBranchName": "main",   // Default branch name for new repositories.
  "git.defaultCloneDirectory": null, // Don't set a specific directory for cloning.
  "git.detectSubmodules": true,       // Automatically detect submodules.
  "git.detectSubmodulesLimit": 20,  // Limit of submodules to detect.
  "git.enableCommitSigning": true,  // Enable commit signing with GPG, SSH etc.
  "git.enableSmartCommit": false,  // Don't commit all changes if index is empty.
  "git.enableStatusBarSync": false,  // Don't show Git sync settings in status bar.
  "git.fetchOnPull": false, // Only fetch the current branch on pull.
  "git.followTagsWhenSync": false, // Do not push all tags when pushing.
  "git.ignoredRepositories": [],   // List of repositories to ignore.
  "git.ignoreLegacyWarning": false, // Don't ignore legacy warning.
  "git.ignoreLimitWarning": false,  // Don't ignore limit warning.
  "git.ignoreMissingGitWarning": false, // Don't ignore missing Git warning.
  "git.ignoreRebaseWarning": false, // Don't ignore rebase warning.
  "git.ignoreSubmodules": false, // Don't ignore changes in submodules.
  "git.ignoreWindowsGit27Warning": false, // Don't ignore Git 2.7 warning on Windows OS.
  "git.inputValidation": false,  // Don't show commit message input validation diagnostics.
  "git.inputValidationLength": 72, // Maximum length of commit message in characters.
  "git.inputValidationSubjectLength": 50, // Threshold for showing a warning on long commit messages.
  "git.mergeEditor": false, // Do not open merge editor automatically on conflicts.
  "git.openAfterClone": "prompt", // Open repository after cloning if no folder is already open.
  "git.openDiffOnClick": false, // Don't open diff view on click on change.
  "git.openRepositoryInParentFolders": "never", // Don't open repository in parent folders.
  "git.optimisticUpdate": true, // Enable optimistic update state of source control.
  "git.path": null, // For setting a specific path to the Git executable.
  "git.postCommitCommand": "sync", // Run git pull && git push after succesful commit.
  "git.promptToSaveFilesBeforeCommit": "always", // Check for unsaved files before commit.
  "git.promptToSaveFilesBeforeStash": "always", // Check for unsaved files before stashing.
  "git.pruneOnFetch": false, // Don't prune remote branches on fetch.
  "git.pullBeforeCheckout": true, // Pull before checking out a branch.
  "git.pullTags": true, // Fetch all tags when pulling.
  "git.rebaseWhenSync": false, // Don't rebase when syncing.
  "git.rememberPostCommitCommand": false, // Don't remember post commit command.
  "git.replaceTagsWhenPull": false, // Do not automatically replace tags when pulling.
  "git.repositoryScanIgnoredFolders": [  // List of ignored folders for scanning for .git folder.
    "node_modules"
  ],
  "git.repositoryScanMaxDepth": 1, // Maximum depth of scan for .git from project root.
  "git.requireGitUserConfig": true, // Require user configuration for Git.
  "git.scanRepositories": [], // List of paths to search for Git repositories in.
  "git.showActionButton": {  // Show action buttons in source control view.
    "commit": true,
    "publish": true,
    "sync": true
  },
  "git.showCommitInput": true,  // Show commit input field in Git panel.
  "git.showInlineOpenFileAction": true, // Show inline open file action in Git panel.
  "git.showProgress": true, // Show Git action progress.
  "git.showPushSuccessNotification": false, // Do not show 'successful push' notification.
  "git.similarityThreshold": 50, // Changes threshold for similarity detection.
  "git.smartCommitChanges": "all", // Changes that are automatically staged on smart commit.
  "git.statusLimit": 10000, // Number of changes that can be parsed by 'git status'.
  "git.suggestSmartCommit": false, // Don't suggest smart commit.
  "git.supportCancellation": false, // Don't show cancellation notification.
  "git.terminalAuthentication": true, // Enable terminal authentication handler.
  "git.terminalGitEditor": false, // Don't use VS-Code as terminal Git editor.
  "git.timeline.date": "committed", // Show commit date in timeline.
  "git.timeline.showAuthor": true, // Show author of commit in timeline.
  "git.timeline.showUncommitted": false, // Don't show uncommitted changes in timeline.
  "git.untrackedChanges": "mixed", // All changes (tracked and untracked) are shown.
  "git.useCommitInputAsStashMessage": false, // Don't use commit message as stash message in Git panel.
  "git.useEditorAsCommitInput": true, // Use full text editor in commit input at Git panel.
  "git.useForcePushIfIncludes": true, // Force push uses 'force-if-incluedes' strategy.
  "git.useForcePushWithLease": true, // Force push uses 'force-with-lease' strategy.
  "git.useIntegratedAskPass": true, // Use integrated askpass for Git strategies.
  "git.verboseCommit": false, // Don't show verbose commit messages if full text editor is activated.


  //----------------------------------------------------------------------------
  // GitHub Extension

  "github.branchProtection": true, // Scan for branch protection settings on remote.
  "github.gitAuthentication": true, // Enable GitHub authentication for Git commands.
  "github.gitProtocol": "ssh", // Use SSH for cloning repositories.


  //----------------------------------------------------------------------------
  // GitHub Actions Extension

  "github-actions.remote-name": "origin", // Remote for GitHub Actions.
  "github-actions.use-enterprise": false, // Disable/enable GitHub Enterprise for Actions.
  "github-actions.workflows.pinned.refresh.enabled": false, // Don't refresh pinned workflows (costs rate limit!).
  "github-actions.workflows.pinned.refresh.interval": 30, // Time to wait between refreshes in seconds.
  "github-actions.workflows.pinned.workflows": [], // List of pinned workflows and their paths for item in status bar.


  //----------------------------------------------------------------------------
  // GitHub Copilot Extension

  "github.copilot.advanced": {},                        // Advanced settings.
  "github.copilot.editor.enableAutoCompletions": true,  // Show inline completion suggestions.
  "github.copilot.enable": {                            // Disable/enable specific languages.
    "*": true,
    "plaintext": true,
    "markdown": true,
    "scminput": false
  },


  //----------------------------------------------------------------------------
  // GitHub Copilot Chat Extension



  //----------------------------------------------------------------------------
  // .gitignore Extension


  //---->      GitLab Workflow -> Uninstall ???!


  //----------------------------------------------------------------------------
  // GitLens - Git supercharged Extension

  "gitlens.showWhatsNewAfterUpgrades": false,  // Disable/enable showing 'What's new' notification after upgrades.
  "gitlens.outputLevel": "warn", // check
  "gitlens.defaultGravatarsStyle": "robohash", // check
  "gitlens.proxy": null, // check
  "gitlens.plusFeatures.enabled": false, // Don't show possible features of paid pro subscription.
  "gitlens.virtualRepositories.enabled": true, // check
  // Inline Blame:
  "gitlens.currentLine.enabled": true,
  "gitlens.currentLine.pullRequests.enabled": true,
  "gitlens.currentLine.format": "${author, }${agoOrDate}${' via  'pullRequest}${ • message|50?}",
  "gitlens.currentLine.uncommittedChangesFormat": "", // check
  "gitlens.currentLine.fontFamily": "",
  "gitlens.currentLine.fontSize": 0,
  "gitlens.currentLine.fontStyle": "normal",
  "gitlens.currentLine.fontWeight": "normal",
  "gitlens.currentLine.scrollable": true, // Line blame is scrollable if it is to big for the screen.
  "gitlens.currentLine.dateFormat": null,
  // Git CodeLens:
  "gitlens.codeLens.enabled": false, // Disable/enable code lens.
  "gitlens.codeLens.authors.enabled": false, // Disable/enable authors code lens.
  "gitlens.codeLens.authors.command": "gitlens.toggleFileBlame", // Command to run if authors code lens is clicked.
  "gitlens.codeLens.recentChange.enabled": false, // Disable/enable rescent changes code lens.
  "gitlens.codeLens.recentChange.command": "gitlens.showQuickCommitFileDetails", // Command to run if recent changes code lens is clicked.
  "gitlens.codeLens.scopes": [ // Specifies where Git code lens will be sowed in document.
    "document",
    "containers"
  ],
  "gitlens.codeLens.symbolScopes": [], // check.
  "gitlens.codeLens.includeSingleLineSymbols": false,
  "gitlens.strings.codeLens.unsavedChanges.recentChangeAndAuthors": "$(ellipsis)",
  "gitlens.strings.codeLens.unsavedChanges.recentChangeOnly": "$(ellipsis)",
  "gitlens.strings.codeLens.unsavedChanges.authorsOnly": "$(ellipsis)",
  "gitlens.codeLens.dateFormat": null,
  // Status Bar Blame:
  "gitlens.statusBar.enabled": false, // Disable/enable status bar blame item.
  "gitlens.statusBar.pullRequests.enabled": false, // Disable/enable pull requests in status bar.
  "gitlens.statusBar.format": "${author}, ${agoOrDate}${' via  'pullRequest}",
  "gitlens.statusBar.alignment": "right",
  "gitlens.statusBar.command": "gitlens.showQuickCommitDetails", // Command that runs if status bar blame is clicked.







  //----------------------------------------------------------------------------
  // GraphQL: Language Feature Support Extension


  //----------------------------------------------------------------------------
  // GraphQL: Syntax Highlighting


  //----------------------------------------------------------------------------
  // Highlight Matching Tag Extension
  // https://marketplace.visualstudio.com/items?itemName=vincaslt.highlight-matching-tag

  "highlight-matching-tag.customEmptyElements": [],        // Custom elements in addition to default HTML empty elements.
  "highlight-matching-tag.enabled": true,                  // Enable highlighting and status bar.
  "highlight-matching-tag.highlightFromAttributes": false,  // Highlight from attributes as source.
  "highlight-matching-tag.highlightFromContent": true,    // Don't highlight from content as source.
  "highlight-matching-tag.highlightFromName": false,        // Highlight from tag name as source.
  "highlight-matching-tag.highlightSelfClosing": true,    // Don't highlight self closing tags.
  "highlight-matching-tag.noDefaultEmptyElements": false,  // Don't highlight default HTML empty elements.
  "highlight-matching-tag.showPath": false,                // Don't show tag's path in status bar.
  "highlight-matching-tag.showRuler": true,                // Show highlighted tag pair in ruler selection.
  "highlight-matching-tag.styles": {                       // Highlighting of matching tags.
    "opening": {
      "name": {
        "custom": {
          "borderWidth": "1px",
          "borderColor": "#606366",
          "borderStyle": "solid",
          "borderRadius": "0",
          "left": "10px"
        }
      }
    },
    "closing": {
      "full": {
        "custom": {
          "borderWidth": "1px",
          "borderColor": "#606366",
          "borderStyle": "solid",
          "borderRadius": "0",
          "left": "10px"
        }
      }
    }
  },


  //----------------------------------------------------------------------------
  // Image Preview Extension


  //----------------------------------------------------------------------------
  // Import Cost Extension
  // https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost

  "importCost.bundleSizeColoring": "minified",      // Bundle size to be displayed.
  "importCost.bundleSizeDecoration": "both",
  "importCost.debug": false,                        // Don't create debug channel.
  "importCost.fontStyle": "normal",                 // Use editor font style.
  "importCost.javascriptExtensions": [              // File extensions to be parsed by JS parser.
    "\\.jsx?$"
  ],
  "importCost.largePackageDarkColor": "#FF0000",    // Highlighting of large packages in dark mode.
  "importCost.largePackageLightColor": "#FF0000",   // Highlighting of large packages in light mode.
  "importCost.margin": 3,                           // Margin between the end of the line and the message.
  "importCost.mediumPackageDarkColor": "#E8BF6A",   // Highlighting of medium packages in dark mode.
  "importCost.mediumPackageLightColor": "#E8BF6A",  // Highlighting of medium packages in light mode.
  "importCost.mediumPackageSize": 100,              // Upper size limit (kb) for medium packages.
  "importCost.showCalculatingDecoration": true,     // Show calculating decoration.
  "importCost.smallPackageDarkColor": "#4FA544",    // Highlighting of small packages in dark mode.
  "importCost.smallPackageLightColor": "#4FA544",   // Highlighting of small packages in light mode.
  "importCost.smallPackageSize": 50,                // Upper size limit (kb) for small packages.
  "importCost.svelteExtensions": [                  // File extensions to be parsed by Svelte parser.
    "\\.svelte$"
  ],
  "importCost.timeout": 20000,                      // Timeout (milliseconds) for calculating package size.
  "importCost.typescriptExtensions": [              // File extensions to be parsed by TS parser.
    "\\.tsx?$"
  ],
  "importCost.vueExtensions": [                     // File extensions to be parsed by Vue parser.
    "\\.vue$"
  ],


  //----------------------------------------------------------------------------
  // JavaScript and TypeScript Nightly Extension

  // JSON to TS Extension

  // Karnma Test Explorer -> Uninstall ???!

  // Laravel Blade Formatter Extension

  // Laravel Blade Snippets Extension

  // Laravel Extra Intellisense Extension

  // Laravel Snippets Extension

  // Live Server Extension

  // Live Share Extension

  // Markdown All in One Extension

  // Markdown Preview Enhanced Extension

  // Markdownlint Extension

  // insert material icon theme here !

  // Move TS Extension

  // Nextjs extension set uninstall ?? What is whit the installed extensions???

  // Nextjs Snippets Extension

  // Paste Image Extension

  // Path Intellisense Extension

  // Prettier - Code Formatter Extension

  // Pretty TypeScript Errors Extension

  // Prisma NextJS Extension

  // Project Manager Extension

  // Rainbow CSV Extension

  // Remote - SSH Extension







  //----------------------------------------------------------------------------
  // Neovim Extension
  // https://marketplace.visualstudio.com/items?itemName=asvetliakov.vscode-neovim

  "extensions.experimental.affinity": {  // Improve performance of extension.
    "asvetliakov.vscode-neovim": 1
  },


  //----------------------------------------------------------------------------
  // Material Icon Theme Extension
  // https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme

  "workbench.iconTheme": "material-icon-theme",
  "material-icon-theme.activeIconPack": "angular",
  "material-icon-theme.enableLogging": false,
  "material-icon-theme.files.associations": {},
  "material-icon-theme.files.color": "#90a4ae",
  "material-icon-theme.files.customClones": [],
  "material-icon-theme.folders.associations": {},
  "material-icon-theme.folders.color": "#569CD6",
  "material-icon-theme.folders.customClones": [],
  "material-icon-theme.folders.theme": "classic",
  "material-icon-theme.hidesExplorerArrows": false,
  "material-icon-theme.languages.associations": {},
  "material-icon-theme.logLevel": "info",
  "material-icon-theme.opacity": 1,
  "material-icon-theme.saturation": 1,




  //----------------------------------------------------------------------------
  // Tailwind CSS IntelliSense Extension
  // https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss

  "tailwindcss-intellisense.trace.server": "off",        // Don't trace communication between VS Code and Tailwind CSS language server.
  "tailwindCSS.classAttributes": [                       // HTML attributes for providing completions.
    "class",
    "className",
    "ngClass",
    "class:list"
  ],
  "tailwindCSS.codeActions": true,                       // Enable code actions.
  "tailwindCSS.colorDecorators": true,                   // Render inline color decorations.
  "tailwindCSS.emmetCompletions": true,                  // Enable emmet completions.
  "tailwindCSS.experimental.classRegex": [],             // Class regex.
  "tailwindCSS.experimental.configFile": null,           // Manually specify config file (null is default tailwind config file).
  "tailwindCSS.files.exclude": [                         // Exclude from intellisense.
    "**/.git/**",
    "**/node_modules/**",
    "**/.hg/**",
    "**/.svn/**"
  ],
  "tailwindCSS.hovers": true,                             // Provide information by hovering.
  "tailwindCSS.includeLanguages": {},                     // Included languages.
  "tailwindCSS.inspectPort": null,                        // Specify port for Node.js inspector agent for LS.
  "tailwindCSS.lint.cssConflict": "warning",              // Warn if there are same classes on one element.
  "tailwindCSS.lint.invalidApply": "error",               // Error out if using unsupported @apply directive.
  "tailwindCSS.lint.invalidConfigPath": "error",          // Error out if config path is invalid.
  "tailwindCSS.lint.invalidScreen": "error",              // Error out if unknown screen name is used with @screen.
  "tailwindCSS.lint.invalidTailwindDirective": "error",   // Error out if unknown value is used with @tailwind.
  "tailwindCSS.lint.invalidVariant": "error",             // Error out if unknown variant is used with @variant.
  "tailwindCSS.lint.recommendedVariantOrder": "warning",  // Warn if class variants are not in the recommended order.
  "tailwindCSS.rootFontSize": 16,                         // Root font size used in browsers.
  "tailwindCSS.showPixelEquivalents": true,               // Show px equivalents for rem values.
  "tailwindCSS.suggestions": true,                        // Enable autocomplete suggestions.
  "tailwindCSS.validate": true,                           // Enable linting (rules can be set in tailwindcss.lint.* file).















  //----------------------------------------------------------------------------
  // Atom Material Icon Theme Extension
  // https://marketplace.visualstudio.com/items?itemName=AtomMaterial.a-file-icon-vscode

  // "a-file-icon-vscode.arrowTheme": "material",
  // "workbench.iconTheme": "a-file-icon-vscode",
  // "workbench.productIconTheme": "a-file-icon-vscode-product-icon-theme",
  // "a-file-icon-vscode.activeIconPacks": [
  //   "angular",
  //   "rails"
  // ],
  // "a-file-icon-vscode.folderColor": "#569CD6",
  // "a-file-icon-vscode.foldersAssociations": {},
  // "a-file-icon-vscode.folderTheme": "classic",
  // "a-file-icon-vscode.languagesAssociations": {},
  // "a-file-icon-vscode.opacity": 1,
  // "a-file-icon-vscode.saturation": 1,
  // "a-file-icon-vscode.showReloadMessage": true,
  // "a-file-icon-vscode.showUpdateMessage": false,
  // "a-file-icon-vscode.showWelcomeMessage": true,




  // Blade Formatter:
  "bladeFormatter.format.indentSize": 2,  // Indent size for Blade files.

  // Prettier+:
  // "editor.defaultFormatter": "svipas.prettier-plus",  // Set Prettier+ as default formatter.
  "editor.formatOnPaste": true,                       // Format code on paste.
  "editor.codeActionsOnSave": {
    "source.organizeImports": "always",
  },
  "editor.formatOnSave": true,
  "blade.format.enable": true,                         // Format Blade files
  "bladeFormatter.format.enabled": true,
  "css.format.enable": true,
  "css.format.maxPreserveNewLines": 1,


  //----------------------------------------------------------------------------
  // Custom CSS and JS Loader Extension

  "vscode_custom_css.imports": [
    "file:///Volumes/Users/manny/personal/github/dotfiles/vscode/extensions/pretty-ts-errors-hack.css"
  ],
  "typescript.updateImportsOnFileMove.enabled": "always",
  "editorconfig.generateAuto": false,
  "terminal.integrated.env.osx": {},
  "workbench.startupEditor": "none",
  // sudo chown -R $(whoami) "$(which code)"
  // sudo chown -R $(whoami) /opt/homebrew/.vscode



  //----------------------------------------------------------------------------
  // Colorize
  // https://marketplace.visualstudio.com/items?itemName=kamikillerto.vscode-colorize

  // "colorize.languages": [
  //   "javascript",
  //   "json"
  // ],
  // "colorize.exclude": [
  //   "**/.git",
  //   "**/.svn",
  //   "**/.hg",
  //   "**/CVS",
  //   "**/.DS_Store",
  //   "**/.git",
  //   "**/node_modules",
  //   "**/bower_components",
  //   "**/tmp",
  //   "**/dist",
  //   "**/tests"
  // ],


  //----------------------------------------------------------------------------
  // Trailing Spaces Extension (VS Code has this built in.)
  // https://marketplace.visualstudio.com/items?itemName=shardulm94.trailing-spaces

  // "trailing-spaces.backgroundColor": "#FF0000",
  // "trailing-spaces.borderColor": "#191B1C",
  // "trailing-spaces.deleteModifiedLinesOnly": false,  // Remove WS only in the last edited lines.
  // "trailing-spaces.highlightCurrentLine": true,
  // "trailing-spaces.includeEmptyLines": true,
  // "trailing-spaces.liveMatching": true,
  // "trailing-spaces.logLevel": "warn",
  // "trailing-spaces.regexp": "[ \t]+",
  // "trailing-spaces.schemeIgnore": [
  //   "output"
  // ],
  // "trailing-spaces.showStatusBarMessage": true,
  // "trailing-spaces.syntaxIgnore": [],
  // "trailing-spaces.trimOnSave": false,


    //----------------------------------------------------------------------------
  // Todo Tree Extension
  // https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree

  "todo-tree.general.automaticGitRefreshInterval": 0,                            // Polling interval (seconds) if repo is updated (0 = off).
  "todo-tree.general.debug": false,                                              // Do not create debug channel.
  "todo-tree.general.exportPath": "~/todo-tree-%Y%m%d-%H%M.txt",                 // Path goal for Todo Tree exports.
  "todo-tree.general.periodicRefreshInterval": 0,                                // Refresh interval (minutes) (0 = off).
  "todo-tree.general.revealBehaviour": "start of todo",                          // Cursor position on revealing a todo.
  "todo-tree.general.rootFolder": "",                                            // Folder for search (default is working tree).
  "todo-tree.general.schemes": [                                                 // Editor schemes to find todos.
    "file",
    "ssh",
    "untitled",
    "vscode-notebook-cell",
    "vscode-userdata"
  ],
  "todo-tree.general.showActivityBarBadge": false,                               // Don't show numbers of todos as badge.
  "todo-tree.general.showIconsInsteadOfTagsInStatusBar": false,                  // Show tags in status bar.
  "todo-tree.general.statusBar": "tags",                                         // Show counts per tag in status bar.
  "todo-tree.general.statusBarClickBehaviour": "reveal",                         // Reveal items on click in status bar.
  "todo-tree.general.tagGroups": {                                               // Group items to one heading.
    "FIX": ["FIXME","FIXIT"]
  },
  "todo-tree.general.tags": [                                                    // List of possible tags.
    "BUG",
    "HACK",
    "FIXME",
    "TODO",
    "XXX",
    "[ ]",
    "[x]"
  ],
  "todo-tree.highlights.backgroundColourScheme": [                               // Highlights in same order as tag list.
    "#FF0000",
    "#569CD6",
    "#FF0000",
    "#FF0000",
    "blue",
    "indigo",
    "violet"
  ],
  "todo-tree.highlights.customHighlight": {                                      // Icons used for tags.
    "BUG": {
      "icon": "bug"
    },
    "HACK": {
      "icon": "tools"
    },
    "FIXME": {
      "icon": "flame"
    },
    "XXX": {
      "icon": "x"
    },
    "[ ]": {
      "icon": "issue-draft"
    },
    "[x]": {
      "icon": "issue-closed"
    }
  },
  "todo-tree.highlights.defaultHighlight": {},                                   // Default config for tag highlighting.
  "todo-tree.highlights.enabled": true,                                          // Enable highlighting of tags.
  "todo-tree.highlights.foregroundColourScheme": [                               // Foreground color (same order as tag list).
    "#191B1C",
    "#191B1C",
    "#191B1C",
    "#191B1C",
    "#191B1C",
    "#191B1C",
    "#191B1C"
  ],
  "todo-tree.highlights.highlightDelay": 100,                                    // Delay (milliseconds) before highlighting tags.
  "todo-tree.highlights.useColourScheme": false,                                 // Don't use color scheme for highlighting.
  "todo-tree.filtering.excludedWorkspaces": [],                                  // Excluded workspaces.
  "todo-tree.filtering.excludeGlobs": [                                          // Exclude from search paths.
    "**/node_modules/*/**"
  ],
  "todo-tree.filtering.ignoreGitSubmodules": false,                              // Don't ignore Git submodules.
  "todo-tree.filtering.includedWorkspaces": [],                                  // Include specific workspaces.
  "todo-tree.filtering.includeGlobs": [],                                        // Include specific search paths.
  "todo-tree.filtering.includeHiddenFiles": true,                                // Include files starting with '.'.
  "todo-tree.filtering.passGlobsToRipgrep": true,                                // Pass searches to RipGrep.
  "todo-tree.filtering.scopes": [],                                              // Scopes that can be switched between.
  "todo-tree.filtering.useBuiltInExcludes": "none",                              // Don't use built in excludes.
  "todo-tree.tree.autoRefresh": true,                                            // Refresh tree if files are opened or saved.
  "todo-tree.tree.disableCompactFolders": true,                                  // Disable compact folders in tree.
  "todo-tree.tree.expanded": false,                                              // Don't expand whole tree if workspace is opened.
  "todo-tree.tree.filterCaseSensitive": false,                                   // Don't filter case sensitive.
  "todo-tree.tree.flat": false,                                                  // Don't show file tree as flat list of files if workspace is opened.
  "todo-tree.tree.groupedBySubTag": false,                                       // Don't show tree grouped by sub tags.
  "todo-tree.tree.groupedByTag": false,                                          // Don't show tree grouped by tags.
  "todo-tree.tree.hideIconsWhenGroupedByTag": false,                             // Don't hide icons if tree is grouped by tags.
  "todo-tree.tree.hideTreeWhenEmpty": true,                                      // Hide tree if it is empty.
  "todo-tree.tree.labelFormat": "${tag} ${after}",                               // Format of tree labels.
  "todo-tree.tree.scanAtStartup": true,                                          // Scan tree if a window gets opened.
  "todo-tree.tree.scanMode": "workspace",                                        // Scan only files in actual workspace.
  "todo-tree.tree.showBadges": true,                                             // Show badges and SCM state in tree.
  "todo-tree.tree.showCountsInTree": true,                                       // Show counts of todos in tree.
  "todo-tree.tree.showCurrentScanMode": true,                                    // Show current scan mode in top of the tree.
  "todo-tree.tree.sort": true,                                                   // Boost performance of RipGrep with a stable tree.
  "todo-tree.tree.sortTagsOnlyViewAlphabetically": false,                        // Sort by file and line number.
  "todo-tree.tree.subTagClickUrl": "",                                           // URL to open if clicking on a sub tag in tree.
  "todo-tree.tree.tagsOnly": false,                                              // Don't show only tag elements in tree if opening a new workspace.
  "todo-tree.tree.tooltipFormat": "${filepath}, line ${line}",                   // Tooltip format.
  "todo-tree.tree.trackFile": true,                                              // Track current file in the tree.
  "todo-tree.tree.buttons.expand": true,                                         // Show button in tree to expand/collaps the tree in tree view.
  "todo-tree.tree.buttons.export": true,                                         // Show export button in tree view.
  "todo-tree.tree.buttons.filter": true,                                         // Show filter button in tree view to enter filter text.
  "todo-tree.tree.buttons.groupBySubTag": false,                                 // Don't show button to group items by sub tag in tree view.
  "todo-tree.tree.buttons.groupByTag": true,                                     // Show button to group items by tag in tree view.
  "todo-tree.tree.buttons.refresh": true,                                        // Show refresh button in tree view.
  "todo-tree.tree.buttons.reveal": true,                                         // Show reveal current item button in tree view (works only if 'track file' is disabled).
  "todo-tree.tree.buttons.scanMode": false,                                      // Don't show button to change scan mode in tree view.
  "todo-tree.tree.buttons.viewStyle": true,                                      // Show button to change the view style in tree view.
  "todo-tree.regex.enableMultiLine": false,                                      // Don't match over multiple lines with regex.
  "todo-tree.regex.regex": "(//|#|<!--|;|/\\*|^|^[ \\t]*(-|\\d+.))\\s*($TAGS)",  // Regex for matching tags ($TAGS = tag list).
  "todo-tree.regex.regexCaseSensitive": true,                                    // Use case sensitive regex.
  "todo-tree.regex.subTagRegex": "",                                             // Regex for extracting sub tags or removing unwanted characters.
  "todo-tree.ripgrep.ripgrep": "",                                               // Location of your version of RipGrep.
  "todo-tree.ripgrep.ripgrepArgs": "--max-columns=1000 --no-config ",            // Aditional arguments to pass to RipGrep.
  "todo-tree.ripgrep.ripgrepMaxBuffer": 500,                                     // Size of buffer (kb) for RipGrep output.
  "todo-tree.ripgrep.usePatternFile": true,                                      // Use RipGreps default pattern file.


  //----------------------------------------------------------------------------
  // TypeScript Extension (includes JavaScript and TypeScript)

  "javascript.autoClosingTags": true, // Enable automatic closing of JSX tags.
  "typescript.autoClosingTags": true, // Enable automatic closing of JSX tags.

  // Formatting (JavaScript):
  "javascript.format.enable": true, // Enable default JavaScript formatter.
  "javascript.format.insertSpaceAfterCommaDelimiter": true, // Insert space after comma.
  "javascript.format.insertSpaceAfterConstructor": false, // Don't insert space after constructor.
  "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true, // Insert space after function keyword for anonymous functions.
  "javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true, // Insert space after keywords in control flow statements.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true, // Insert space after opening and before closing empty braces.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false, // Don't insert space after opening and before closing JSX expression braces {child}.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": false, // Don't insert space after opening and before closing non-empty braces {child}.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false, // Don't insert space after opening and before closing non-empty brackets [child].
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false, // Don't insert space after opening and before closing non-empty parenthesis (child).
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false, // Don't insert space after opening and before closing template string braces ${child}.
  "typescript.format.insertSpaceAfterSemicolonInForStatements": true, // Insert space after semicolon in for statements.
  "typescript.format.insertSpaceAfterTypeAssertion": false, // Don't insert space after type assertion.
  "typescript.format.insertSpaceBeforeAndAfterBinaryOperators": true, // Insert space before and after binary operators.
  "typescript.format.insertSpaceBeforeFunctionParenthesis": false, // Don't insert space before function parenthesis.
  "typescript.format.placeOpenBraceOnNewLineForControlBlocks": false, // Place open brace on new line for control blocks.
  "typescript.format.placeOpenBraceOnNewLineForFunctions": false, // Place open brace on new line for functions.
  "typescript.format.semicolons": "insert", // Insert semicolons on formatting.
  // Formatting (TypeScript):
  "typescript.format.enable": true, // Enable default TypeScript formatter.
  "typescript.format.indentSwitchCase": true, // Use indentation for switch cases.
  "typescript.format.insertSpaceAfterCommaDelimiter": true, // Insert space after comma.
  "typescript.format.insertSpaceAfterConstructor": false, // Don't insert space after constructor.
  "typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true, // Insert space after function keyword for anonymous functions.
  "typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": true, // Insert space after keywords in control flow statements.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true, // Insert no space after opening and before closing empty braces.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false, // Don't insert space after opening and before closing JSX expression braces {child}.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true, // Don't insert space after opening and before closing non-empty braces {child}.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false, // Don't insert space after opening and before closing non-empty brackets [child].
  // Inlay Hint Settings (JavaScript):
  "javascript.inlayHints.enumMemberValues.enabled": true, // Show enum member values in inlay hints.
  "javascript.inlayHints.functionLikeReturnTypes.enabled": false, // Show function like return types in inlay hints.
  "javascript.inlayHints.parameterNames.enabled": "none",  // Show parameter names in inlay hints.
  "javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true, // Suppress parameter name inlay hints when argument matches name.
  "javascript.inlayHints.parameterTypes.enabled": false, // Show parameter types in inlay hints.
  "javascript.inlayHints.propertyDeclarationTypes.enabled": false, // Show property declaration types in inlay hints.
  "javascript.inlayHints.variableTypes.enabled": true, // Show variable types in inlay hints.
  "javascript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true, // Suppress variable type inlay hints when type matches name.
  // Inlay Hint Settings (TypeScript):
  "typescript.inlayHints.enumMemberValues.enabled": true, // Show enum member values in inlay hints.
  "typescript.inlayHints.functionLikeReturnTypes.enabled": false, // Show function like return types in inlay hints.
  "typescript.inlayHints.parameterNames.enabled": "none", // Show parameter names in inlay hints.
  "typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true, // Suppress parameter name inlay hints when argument matches name.
  "typescript.inlayHints.parameterTypes.enabled": false, // Show parameter types in inlay hints.
  "typescript.inlayHints.propertyDeclarationTypes.enabled": false, // Show property declaration types in inlay hints.
  "typescript.inlayHints.variableTypes.enabled": true, // Show variable types in inlay hints.
  "typescript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true, // Suppress variable type inlay hints when type matches name.

  // Preferences (JavaScript):
  "javascript.preferences.autoImportFileExcludePatterns": [], // Exclude patterns for auto import.
  "javascript.preferences.autoImportSpecifierExcludeRegexes": [], // Exclude regexes for auto import.
  "javascript.preferences.importModuleSpecifier": "relative", // Use relative paths for imports if possible.
  "javascript.preferences.importModuleSpecifierEnding": "auto", // Select path ending for imports from project settings.
  "javascript.preferences.jsxAttributeCompletionStyle": "auto", // Select because of context if '= {}' or '= ""' is used.
  "javascript.preferences.organizeImports": {}, // Organize how imports are ordered.
  "javascript.preferences.quoteStyle": "single", // Use single quotes for strings.
  "javascript.preferences.renameMatchingJsxTags": true, // Rename matching JSX tags automatically.
  "javascript.preferences.useAliasesForRenames": false, // Don't introduce shorthand aliases for renames.
  // Preferences (TypeScript):
  "typescript.preferences.autoImportFileExcludePatterns": [], // Exclude patterns for auto import.
  "typescript.preferences.autoImportSpecifierExcludeRegexes": [], // Exclude auto imports with regex.
  "typescript.preferences.importModuleSpecifier": "relative", // Use shortest path for imports.
  "typescript.preferences.importModuleSpecifierEnding": "auto", // Select path ending for imports from project settings.
  "typescript.preferences.includePackageJsonAutoImports": "on", // Search in package.json for available imports too.
  "typescript.preferences.jsxAttributeCompletionStyle": "auto", // Select because of context if '= {}' or '= ""' is used.
  "typescript.preferences.organizeImports": {}, // Organize how imports are ordered.
  "typescript.preferences.preferTypeOnlyAutoImports": true, // Use 'type' keyword for auto imports if possible.
  "typescript.preferences.quoteStyle": "single", // Use single quotes for strings.
  "typescript.preferences.renameMatchingJsxTags": true, // Rename matching JSX tags automatically.
  "typescript.preferences.useAliasesForRenames": false, // Don't introduce shorthand aliases for renames.

  // Suggestion Settings (JavaScript):
  "javascript.suggest.enabled": true, // Enable auto completion suggestions.
  "javascript.preferGoToSourceDefinition": false, // Jump to type definition instead of source definition.
  "javascript.referencesCodeLens.enabled": false, // Don't show references code lens.
  "javascript.referencesCodeLens.showOnAllFunctions": false, // Don't show references code lens on all functions.
  "javascript.suggest.autoImports": true, // Show auto import suggestions.
  "javascript.suggest.classMemberSnippets.enabled": true, // Enable snippet completion for class members.
  "javascript.suggest.completeFunctionCalls": true, // Complete function calls with their parameters.
  "javascript.suggest.completeJSDocs": true, // Complete JSDoc comments.
  "javascript.suggest.includeAutomaticOptionalChainCompletions": true, // Include automatic completions for optional chains.
  "javascript.suggest.includeCompletionsForImportStatements": true, // Include completions for import statements.
  "javascript.suggest.jsdoc.generateReturns": true, // Generate returns in JSDoc comments.
  "javascript.suggest.names": true, // Include unique names in suggestions.
  "javascript.suggest.paths": true, // Suggest paths in import statements and require calls.
  "javascript.suggestionActions.enabled": true, // Enable suggestion actions diagnostics.

  // Suggestion Settings (TypeScript):
  "typescript.suggest.enabled": true, // Enable auto completion suggestions.
  "typescript.suggest.autoImports": true, // Show auto import suggestions.
  "typescript.suggest.classMemberSnippets.enabled": true, // Enable snippet completion for class members.
  "typescript.suggest.completeFunctionCalls": true, // Don't complete function calls with their parameters.
  "typescript.suggest.completeJSDocs": true, // Complete JSDoc comments.
  "typescript.suggest.includeAutomaticOptionalChainCompletions": true, // Include automatic completions for optional chains.
  "typescript.suggest.includeCompletionsForImportStatements": true, // Include completions for import statements.
  "typescript.suggest.jsdoc.generateReturns": true, // Generate returns in JSDoc comments.
  "typescript.suggest.objectLiteralMethodSnippets.enabled": true, // Enable snippet completion for object literal methods.
  "typescript.suggest.paths": true, // Suggest paths in import statements and require calls.


  "javascript.updateImportsOnFileMove.enabled": "always", // Update imports on file move.
  "javascript.updateImportsOnPaste.enabled": true, // Update imports on paste.
  "typescript.updateImportsOnPaste.enabled": true, // Update import paths on pasting import statements.



  "javascript.validate.enable": true, // Enable JavaScript validation.
  "js/ts.implicitProjectConfig.checkJs": true, // Check JS files (will be overwritten by project settings).
  "js/ts.implicitProjectConfig.experimentalDecorators": false, // Don't use experimental decorators.
  "js/ts.implicitProjectConfig.module": "ESNext", // Use ESNext modules.
  "js/ts.implicitProjectConfig.strictFunctionTypes": true, // Use strict function types.
  "js/ts.implicitProjectConfig.strictNullChecks": true, // Use strict null checks.
  "js/ts.implicitProjectConfig.target": "ES2022", // Set target JavaScript version.
  "typescript.check.npmIsInstalled": true, // Check if npm is installed.
  "typescript.disableAutomaticTypeAcquisition": false, // Fetch types to improve IntelliSense.
  "typescript.enablePromptUseWorkspaceTsdk": false, // Don't prompt to use workspace TypeScript version.
  "typescript.experimental.expandableHover": false, // Don't expand on hover automatically.
  "typescript.implementationsCodeLens.enabled": false,
  "typescript.implementationsCodeLens.showOnInterfaceMethods": false,
  "typescript.locale": "auto", // Set locale for linter output on system locale.
  "typescript.npm": "", // Path to specific npm executable.
  "typescript.preferGoToSourceDefinition": false, // Jump to type definition instead of source definition.
  "typescript.referencesCodeLens.enabled": false, // Don't show references code lens.
  "typescript.referencesCodeLens.showOnAllFunctions": false, // Don't show references code lens on all functions.
  "typescript.reportStyleChecksAsWarnings": true, // Report style checks as warnings.
  "typescript.suggestionActions.enabled": true, // Enable suggestion actions diagnostics.
  "typescript.surveys.enabled": true, // Enable surveys.
  "typescript.tsc.autoDetect": "on", // Turn on auto detection for TS-Compiler tasks.
  "typescript.tsdk": "", // Path to specific TypeScript Compiler.

  // TypeScript Server Setup:
  "typescript.tsserver.enableRegionDiagnostics": true, // Enable language region based diagnostics.
  "typescript.tsserver.enableTracing": false, // Use trace logging for TypeScript server to see performance issues.
  "typescript.tsserver.experimental.enableProjectDiagnostics": true, // Enables project wide error diagnostics.
  "typescript.tsserver.log": "off", // Turn off logging for TypeScript server.
  "typescript.tsserver.maxTsServerMemory": 3072, // Set maximum memory for TypeScript server (MB).
  "typescript.tsserver.nodePath": "", // Path to specific Node.js executable.
  "typescript.tsserver.pluginPaths": [], // Path to specific TypeScript server plugins.
  "typescript.tsserver.useSyntaxServer": "auto", // Use syntax server for TypeScript server to do more quickly folding etc.
  "typescript.tsserver.watchOptions": "vscode", // Use VS Code watch options for TypeScript server.
  "typescript.tsserver.web.projectWideIntellisense.enabled": true, // Enable project wide IntelliSense in VS-Code web.
  "typescript.tsserver.web.projectWideIntellisense.suppressSemanticErrors": false, // Don't suppress semantic errors in project wide IntelliSense in VS-Code web
  "typescript.tsserver.web.typeAcquisition.enabled": true, // Enables IntelliSense for packages on the web.
  "typescript.validate.enable": true, // Enable/Disable TypeScript validation.
  "typescript.workspaceSymbols.excludeLibrarySymbols": true, // Exclude symbols that come from library files.
  "typescript.workspaceSymbols.scope": "currentProject", // Files/workspaces that are be searched by 'Go to symbol'.


  //----------------------------------------------------------------------------
  // TypeScript Importer Configuration Extension

  "tsimporter.disabled": false, // Plugin is turned on if set to false.
  "tsimporter.doubleQuotes": false, // Prefer single quotes.
  "tsimporter.emitSemicolon": true, // Add ; if there is none.
  "tsimporter.filesToExclude": [], // Exclude files by glob from watch and scan.
  "tsimporter.filesToScan": [ // Files to scan by glob pattern.
    "**/*.ts",
    "**/*.tsx",
    "**/*.vue"
  ],
  "tsimporter.lowImportance": false, // Import emmidiately, not at last on build time.
  "tsimporter.noStatusBar": true, // Disable statusbar item,
  "tsimporter.preferRelative": true, // Prefer relative imports if possible.
  "tsimporter.removeFileExtensions": ".d.ts,.ts,.tsx", // File extensions to remove from import statements.
  "tsimporter.showNotifications": false, // (true disables the extension) don't show notifications.
  "tsimporter.spaceBetweenBraces": true, // Add space on imports '{ foo }'.
  "tsimporter.tsconfigName": "tsconfig.json",
  "console-ninja.featureSet": "Community", // TS-Configuration to search for.


  //----------------------------------------------------------------------------
  // Vercel Extension








}

